package com.nicadevelop.nicavpn.Api_Fetch_Service;import android.content.Intent;import android.content.SharedPreferences;import android.os.Build;import android.os.IBinder;import android.util.Base64;import android.util.Log;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.annotation.RequiresApi;import androidx.core.app.JobIntentService;import androidx.localbroadcastmanager.content.LocalBroadcastManager;import com.android.volley.DefaultRetryPolicy;import com.android.volley.Request;import com.android.volley.RequestQueue;import com.android.volley.toolbox.StringRequest;import com.android.volley.toolbox.Volley;import com.google.gson.Gson;import com.google.gson.JsonSyntaxException;import com.nicadevelop.nicavpn.Constant.Constant;import com.nicadevelop.nicavpn.Constants;import org.jetbrains.annotations.NotNull;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.List;import java.util.Random;public class Fetch_Service extends JobIntentService {    SharedPreferences home_Activity_SP;    api_response api_model;    api_data_model_updated Api_response_model;    ArrayList<api_response> api_array;    public String json_value = "";    @Override    public void onCreate() {        super.onCreate();    }    @Override    public void onDestroy() {        super.onDestroy();    }    @Nullable    @Override    public IBinder onBind(@NotNull Intent intent) {        return null;    }    @Override    protected void onHandleWork(@NonNull Intent intent) {    }    @RequiresApi(api = Build.VERSION_CODES.N)    @Override    public int onStartCommand(@Nullable Intent intent, int flags, int startId) {        startWork();        return super.onStartCommand(intent, flags, startId);    }    @RequiresApi(api = Build.VERSION_CODES.N)    private void startWork() {        init_array_list();        getdatafromapi();    }    private void init_array_list() {        home_Activity_SP = getSharedPreferences("DATA", MODE_PRIVATE);        api_array = new ArrayList<>();    }    @RequiresApi(api = Build.VERSION_CODES.N)    private void getdatafromapi() {        hit_api();    }    @RequiresApi(api = Build.VERSION_CODES.N)    private void hit_api() {        RequestQueue queue = Volley.newRequestQueue(Fetch_Service.this);        StringRequest stringRequest = new StringRequest(Request.Method.GET, Constant.SERVER_URL, this::get_pre_static_data, error -> {        });        stringRequest.setRetryPolicy(new DefaultRetryPolicy(5000, 2, 2));        queue.add(stringRequest);    }    @RequiresApi(api = Build.VERSION_CODES.N)    public void get_pre_static_data(String input) {        parse_data(input);    }    @RequiresApi(api = Build.VERSION_CODES.N)    private void parse_data(String input) {        api_array.clear();        try {            JSONObject jsonObject = new JSONObject(input);            JSONArray jsonArray = jsonObject.getJSONArray("servers");            if (home_Activity_SP != null) {                if (jsonArray.length() > 0) {                    for (int i = 0; i < jsonArray.length(); i++) {                        JSONObject object = jsonArray.getJSONObject(i);                        try {//                            object.getInt("time")                            api_model = new api_response();                            api_model.setServer_id(object.getInt("server_id"));                            api_model.setServerStatus(object.getInt("ServerStatus"));                            api_model.setHostName(object.getString("HostName"));                            api_model.setCity(object.getString("city"));                            api_model.setIP(object.getString("IP"));                            api_model.set_type(object.getInt("type"));                            api_model.setTimer_val(object.getInt("time"));                            api_model.setV2ray_udp(object.getString("v2ray_udp"));                            api_model.setV2ray_tcp(object.getString("v2ray_tcp"));                            api_model.setPublickey(object.getString("publickey"));                            api_model.setDrawable(object.getString("drawable"));                            api_model.setIp_dnstt(object.getString("ip_dnstt"));                            api_array.add(api_model);                        } catch (JSONException e) {                            e.printStackTrace();                        }                    }                    if (home_Activity_SP != null) {                        if (api_array != null && !api_array.isEmpty()) {                            List<api_response> newList = new ArrayList<>(api_array);                            List<api_data_model_updated> newList_updated = new ArrayList<>();                            Random randomGenerator = new Random();                            int random_selection = randomGenerator.nextInt(newList.size());                            api_data_model_updated api_data_model_updated = new api_data_model_updated();                            api_data_model_updated.setServer_id(newList.get(random_selection).getServer_id());                            api_data_model_updated.setServerStatus(newList.get(random_selection).getServerStatus());                            api_data_model_updated.setHostName(newList.get(random_selection).getCity());                            api_data_model_updated.setCity(newList.get(random_selection).getCity());                            api_data_model_updated.setIP(newList.get(random_selection).getIP());                            api_data_model_updated.set_type(newList.get(random_selection).get_type());                            api_data_model_updated.setTimer_val(newList.get(random_selection).getTimer_val());                            api_data_model_updated.setV2ray_udp(newList.get(random_selection).getV2ray_udp());                            api_data_model_updated.setV2ray_tcp(newList.get(random_selection).getV2ray_tcp());                            api_data_model_updated.setPublickey(newList.get(random_selection).getPublickey());                            api_data_model_updated.setDrawable(newList.get(random_selection).getDrawable());                            api_data_model_updated.setIp_dnstt(newList.get(random_selection).getIp_dnstt());                            newList_updated.add(api_data_model_updated);                            //list saved to cache                            Gson gson = new Gson();                            String json = gson.toJson(api_array);                            if (!json.isEmpty()) {                                SharedPreferences.Editor editor = home_Activity_SP.edit();                                if (isJSONValid(json)) {                                    if (home_Activity_SP.contains("list_saved_cache")) {                                        editor.remove("list_saved_cache").apply();                                    }                                    editor.putString("list_saved_cache", json).apply();                                    for (api_data_model_updated Api_response_Pojo : newList_updated) {                                        Api_response_model = Api_response_Pojo;                                    }                                    storeValueToPreference(home_Activity_SP, "best_server_model", Api_response_model);                                }                            }                        }                    }                    Constants.IS_RUN = true;                    Intent intent = new Intent("data_fetch_receiver");                    intent.putExtra("data_fetched", true);                    LocalBroadcastManager.getInstance(Fetch_Service.this).sendBroadcast(intent);                }            }        } catch (JSONException e) {            e.printStackTrace();        }    }    public static void storeValueToPreference(SharedPreferences sharedPreferences, String key, Object object) {        if (sharedPreferences != null) {            SharedPreferences.Editor editor = sharedPreferences.edit();            Gson gson = new Gson();            String json = gson.toJson(object);            if (sharedPreferences.contains(key)) {                editor.remove(key).apply();            }            editor.putString(key, json);            editor.apply();        }    }    public api_data_model_updated getBestServer_after_calculation(SharedPreferences sharedPreferences) {        api_data_model_updated responsePojo = (api_data_model_updated) getPreference("best_server_model", sharedPreferences);        if (responsePojo != null) {            if (responsePojo.getHostName() != null) {                return responsePojo;            } else {                return null;            }        }        return null;    }    public Object getPreference(String key, SharedPreferences global_sharedPreferences) {        Gson gson = new Gson();        if (global_sharedPreferences != null) {            json_value = global_sharedPreferences.getString(key, null);        }        if (json_value != null) {            if (!json_value.isEmpty()) {                try {                    return gson.fromJson(json_value, api_data_model_updated.class);                } catch (JsonSyntaxException | IllegalStateException e) {                    e.printStackTrace();                }            } else {                return null;            }        }        return null;    }    public boolean isJSONValid(String test) {        try {            new JSONObject(test);        } catch (JSONException ex) {            // edited, to include @Arthur's comment            // e.g. in case JSONArray is valid as well...            try {                new JSONArray(test);            } catch (JSONException ex1) {                return false;            }        }        return true;    }}